@page "/accounts/{accountId}"

@inject AccountsApiClient _accountsApiClient
@inject IDialogService _dialogService

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudText Typo="Typo.h3">@account?.StudentName</MudText>
        <MudText Typo="Typo.caption">@account?.StudentEmail</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="4">
                <MudCard Style="height:100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">Account Balance</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid Justify="Justify.Center">
                            <MudItem>
                                <Currency Typo="Typo.h4" Value="account?.Balance" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Transaction History</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSimpleTable Elevation="0" Hover="true" Striped="true">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Note</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var transaction in account?.Transactions.OrderByDescending(t => t.DateEffective).ToArray() ?? Array.Empty<TransactionDto>())
                        {
                            var pending = (transaction.DateEffective.LocalDateTime > DateTime.Now);

                            <tr style="@(pending ? "font-style:italic !important;" : "")">
                                <td>
                                    @if (pending)
                                    {
                                        <MudIcon Color="Color.Default" Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
                                    }
                                </td>
                                <td>
                                    @transaction.DateEffective.LocalDateTime.ToShortDateString()
                                </td>
                                <td>
                                    <Currency Value="transaction.Amount" />
                                </td>
                                <td>
                                    @transaction.Note
                                </td>
                                <td>
                                    <AuthorizeView Policy="@Roles.Teacher">
                                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="() => OnClickDeleteTransaction(transaction)" Size="Size.Small" />
                                    </AuthorizeView>
                                </td>
                            </tr>
                        }

                        @if (account is not null && account.StartingBalance > 0)
                        {
                            <tr>
                                <td>&nbsp;</td>
                                <td>
                                    @account.DateCreated.LocalDateTime.ToShortDateString()
                                </td>
                                <td>
                                    <Currency Value="account.StartingBalance" />
                                </td>
                                <td>
                                    Account starting balance.
                                </td>
                                <td>&nbsp;</td>
                            </tr>
                        }

                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudFab Class="mb-4 ml-4" Color="Color.Default" Icon="@Icons.Material.Filled.ArrowBack" Link="/accounts" Style="position:fixed;bottom:0;left:0;" />

<AuthorizeView Policy="@Roles.Teacher">
    <MudFab Class="mb-4 mr-4" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Label="Add Transaction" OnClick="OnClickAddTransaction" Style="position:fixed;bottom:0;right:0;" />
</AuthorizeView>


@code
{
    [Parameter]
    public string AccountId { get; set; } = string.Empty;

    AccountDto? account = null;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task OnClickAddTransaction()
    {
        var dialogRef = _dialogService.Show<AddTransactionDialog>();

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        var transaction = (TransactionDto)dialogResult.Data;

        await _accountsApiClient.AddTransaction(AccountId, transaction);

        await Refresh();
    }

    async Task OnClickDeleteTransaction(TransactionDto transaction)
    {
        var confirmed = await _dialogService.ShowMessageBox(
            title: "Delete Transaction",
            message: $"Are you sure you want to delete this transaction in the amount of {transaction.Amount:c}?",
            yesText: "Yes - Delete",
            noText: "Cancel");

        if (confirmed is null || !confirmed.Value)
        {
            return;
        }

        await _accountsApiClient.DeleteTransaction(AccountId, transaction.Id);

        await Refresh();
    }

    async Task Refresh()
    {
        account = await _accountsApiClient.Get(AccountId);
    }
}